diff --git a/ni/src/ncl/NclNewHDF5.c b/ni/src/ncl/NclNewHDF5.c
index 000f6b7b2..9cd5eda48 100644
--- a/ni/src/ncl/NclNewHDF5.c
+++ b/ni/src/ncl/NclNewHDF5.c
@@ -35,6 +35,8 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 
+#define H5_USE_18_API
+
 #include <hdf5.h>
 
 #ifdef NIO_LIB_ONLY
@@ -46,6 +48,19 @@
 #include <ncarg/hlu/NresDB.h>
 #endif
 
+
+#if (H5_VERSION_GE(1,8,13))
+#define HAS_H5_FREE_MEM  1
+#else 
+#define HAS_H5_FREE_MEM  0
+#endif	
+
+#if (H5_SIZEOF_HID_T ==  H5_SIZEOF_INT64_T)
+#define HID_FORMAT "%lld"
+#else
+#define HID_FORMAT "%d"
+#endif
+
 #ifndef MAX_NCL_GROUP_LEVEL
 #define MAX_NCL_GROUP_LEVEL    32
 #endif
@@ -202,7 +217,7 @@ hid_t h5memtype2filetype(hid_t memtype)
        else if(H5T_NATIVE_DOUBLE == memtype)
             h5type = H5T_IEEE_F64BE;
        else
-            fprintf(stderr, "\nUNKNOWN TYPE: <%d>. file: %s, line: %d\n",
+            fprintf(stderr, "\nUNKNOWN TYPE: <"HID_FORMAT">. file: %s, line: %d\n",
                             memtype, __FILE__, __LINE__);
     }
     else
@@ -242,7 +257,7 @@ hid_t h5memtype2filetype(hid_t memtype)
         else if(H5T_NATIVE_DOUBLE == memtype)
             h5type = H5T_IEEE_F64LE;
         else
-            fprintf(stderr, "\nUNKNOWN TYPE: <%d>. file: %s, line: %d\n",
+            fprintf(stderr, "\nUNKNOWN TYPE: <"HID_FORMAT">. file: %s, line: %d\n",
                                memtype, __FILE__, __LINE__);
     }
 
@@ -514,7 +529,7 @@ static void _setpid(NclFileGrpNode *grpnode)
     }
 }
 
-static int _getH5grpID(NclFileGrpNode *grpnode)
+static hid_t _getH5grpID(NclFileGrpNode *grpnode)
 {
     hid_t id = -1;
 
@@ -541,7 +556,7 @@ static int _getH5grpID(NclFileGrpNode *grpnode)
         NHLPERROR((NhlFATAL,NhlEUNKNOWN,
               "NclNewHDF5 _getH5grpID: Could not reopen the file (%s) for writing",
               NrmQuarkToString(grpnode->path)));
-        return(NhlFATAL);
+        return((hid_t) NhlFATAL);
     }
 
     grpnode->define_mode = 0;
@@ -552,7 +567,7 @@ static int _getH5grpID(NclFileGrpNode *grpnode)
    *fprintf(stderr, "Leaving _getH5grpID, at file: %s, line: %d\n\n", __FILE__, __LINE__);
    */
 
-    return (int)id;
+    return id;
 }
 
 /*
@@ -584,9 +599,8 @@ char *_getH5typeName(hid_t type, int ind)
     if(type < 0)
     {
         fprintf(stderr, "\n\t********************************************\n");
-        fprintf(stderr, "\tBad data type: %d\n", type);
         fprintf(stderr, "\t<ERROR ERROR ERROR ERROR ERROR ERROR ERROR>\n");
-        fprintf(stderr, "\tBad data type: %d\n", type);
+        fprintf(stderr, "\tBad data type: "HID_FORMAT"\n", type);
         fprintf(stderr, "\t********************************************\n\n");
         return attTypeName;
     }
@@ -684,7 +698,10 @@ char *_getH5typeName(hid_t type, int ind)
                 {
                     /* Name and offset */
                     name = H5Tget_member_name(type, i);
-                    free(name);
+		    if (HAS_H5_FREE_MEM)
+			    H5free_memory(name);
+		    else
+			    free(name);
             
                     /* Member's type */
                     subtype = H5Tget_member_type(type, i);
@@ -934,7 +951,12 @@ char *_getH5typeName(hid_t type, int ind)
                 }
 
                 /* Release resources */
-                for (i=0; i<nmembs; i++) free(name[i]);
+		if (HAS_H5_FREE_MEM) {
+			for (i=0; i<nmembs; i++) H5free_memory(name[i]);
+		}
+		else {
+			for (i=0; i<nmembs; i++) free(name[i]);
+		}
                 free(name);
                 free(value);
                 H5Tclose(super);
@@ -1208,6 +1230,10 @@ NclFileEnumRecord *readH5EnumAtt(hid_t type)
     {
         membname = H5Tget_member_name(type, n);
         enumrec->enum_node[n].name = NrmStringToQuark(membname);
+	if (HAS_H5_FREE_MEM)
+		H5free_memory(membname);
+	else
+		free(membname);
     }
 
     switch(enumrec->type)
@@ -1254,7 +1280,6 @@ NclFileEnumRecord *readH5EnumAtt(hid_t type)
              break;
     }
     
-    NclFree(membname);
     NclFree(membvalue);
 
     return ((void *) enumrec);
@@ -1310,9 +1335,9 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
         fprintf(stderr, "\n\n\n");
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "PROBLEM TO FIND ATTRIBUTE in file: %s, line: %d\n", __FILE__, __LINE__);
-        fprintf(stderr, "\tobj_id: %d\n", obj_id);
+        fprintf(stderr, "\tobj_id: "HID_FORMAT"\n", obj_id);
         fprintf(stderr, "\tattr_name: <%s>\n", attr_name);
-        fprintf(stderr, "\tattr_id: %d\n", attr_id);
+        fprintf(stderr, "\tattr_id: "HID_FORMAT"\n", attr_id);
         fprintf(stderr, "PROBLEM TO FIND ATTRIBUTE in file: %s, line: %d\n", __FILE__, __LINE__);
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "\n\n\n");
@@ -1330,10 +1355,10 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
         fprintf(stderr, "\n\n\n");
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "PROBLEM TO FIND ATTRIBUTE in file: %s, line: %d\n", __FILE__, __LINE__);
-        fprintf(stderr, "\tobj_id: %d\n", obj_id);
+        fprintf(stderr, "\tobj_id: "HID_FORMAT"\n", obj_id);
         fprintf(stderr, "\tattr_name: <%s>\n", attr_name);
-        fprintf(stderr, "\tattr_id: %d\n", attr_id);
-        fprintf(stderr, "\ttype: %d\n", type);
+        fprintf(stderr, "\tattr_id: "HID_FORMAT"\n", attr_id);
+        fprintf(stderr, "\ttype: "HID_FORMAT"\n", type);
         fprintf(stderr, "PROBLEM TO FIND ATTRIBUTE in file: %s, line: %d\n", __FILE__, __LINE__);
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "\n\n\n");
@@ -1386,9 +1411,9 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
         fprintf(stderr, "\n\n\n");
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "PROBLEM WITH NDIMS in file: %s, line: %d\n", __FILE__, __LINE__);
-        fprintf(stderr, "\tobj_id: %d\n", obj_id);
+        fprintf(stderr, "\tobj_id: "HID_FORMAT"\n", obj_id);
         fprintf(stderr, "\tattr_name: <%s>\n", attr_name);
-        fprintf(stderr, "\tattr_id: %d\n", attr_id);
+        fprintf(stderr, "\tattr_id: "HID_FORMAT"\n", attr_id);
         fprintf(stderr, "\tndims: %d\n", ndims);
         fprintf(stderr, "PROBLEM WITH NDIMS in file: %s, line: %d\n", __FILE__, __LINE__);
         fprintf(stderr, "**************************************************************\n");
@@ -1486,7 +1511,7 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
         {
 	    ng_size_t size;
 	    char buf[1024];
-	    hid_t dataset_id, type_id;
+	    hid_t dataset_id;
             status = H5Rget_obj_type2(attr_id, ref_type, &rbuf[i], &obj_type);
 	    ref_node[i].ref_type = (int)ref_type;
 	    ref_node[i].obj_type = (int)obj_type;
@@ -1497,7 +1522,6 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
             }
 	    
 	    dataset_id = H5Rdereference(attr_id, H5R_OBJECT, &rbuf[i]);
-	    type_id = H5Dget_type(dataset_id);
 	    size = H5Rget_name(attr_id, H5R_OBJECT, &rbuf[i],buf,0);
 	    size += 1;
 	    size = H5Rget_name(attr_id, H5R_OBJECT, &rbuf[i],buf,size);
@@ -1746,7 +1770,10 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
 
                 H5Tclose(subtype);
                 NclFree(typename);
-                NclFree(mname);
+		if (HAS_H5_FREE_MEM)
+			H5free_memory(mname);
+		else
+			free(mname);
             }
 
             attnode->n_elem = nelmts;
@@ -1771,7 +1798,6 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
 		NclBasicDataTypes vlentype;
 		char buf[1024];
 		int buflen = 0;
-		hsize_t t_size;
 		NrmQuark *value;
 		int i,j;
 		int tlen = 0;
@@ -1780,7 +1806,6 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
 		rdata = (hvl_t *)NclCalloc(nelmts , sizeof(hvl_t));
 		status = H5Aread(attr_id, p_type, rdata);
 		super = H5Tget_super(p_type);
-		t_size = H5Tget_size(super);
 		typename = _getH5typeName(super, 15);
 		vlentype = string2NclType(typename);
 		NclFree(typename);
@@ -1808,8 +1833,9 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
 
 		switch (vlentype) {
 			NclFileReferenceNode *ref_node;
-			hid_t ref_type, obj_type;
+			hid_t ref_type;
 			int ref_count;
+			H5O_type_t obj_type;
 
 		case NCL_reference:
 			if (H5Tequal(super,H5T_STD_REF_OBJ)) {
@@ -1820,10 +1846,9 @@ herr_t _checkH5attribute(hid_t obj_id, const char *attr_name, const H5A_info_t *
 			ref_count = 0;
 			for (i = 0; i < nelmts; i++) {
 				for (j = 0; j < rdata[i].len; j++) {
-					hid_t dataset_id, type_id;
+					hid_t dataset_id;
 					ref_node = &(ref_node_list[ref_count]);
 					dataset_id = H5Rdereference(attr_id, H5R_OBJECT, &(((int*)rdata[i].p)[j]));
-					type_id = H5Dget_type(dataset_id);
 					buflen = H5Rget_name(attr_id, H5R_OBJECT, &(((int*)rdata[i].p)[j]), buf, 0);
 					buflen = H5Rget_name(attr_id, H5R_OBJECT, &(((int*)rdata[i].p)[j]), buf, buflen + 1);
 					buflen = strlen(buf);
@@ -2913,7 +2938,7 @@ herr_t _readH5dataInfo(hid_t dset, char *name, NclFileVarNode *node)
         char    *mname=NULL;     /* member name */
         hid_t    subtype;        /* member data type */
         unsigned nmembs;         /* number of members */
-        unsigned i;              /* miscellaneous counters */
+        unsigned i,j;              /* miscellaneous counters */
 
         NclFileCompoundRecord *comprec;
         NclFileCompoundNode   *compnode;
@@ -2922,6 +2947,7 @@ herr_t _readH5dataInfo(hid_t dset, char *name, NclFileVarNode *node)
         NrmQuark compatt = NrmStringToQuark("component_names");
 	H5T_class_t class;
 	int ndims;
+	hsize_t *dimsizes;
 
 	varnode->udt_type = NCL_UDT_compound;
 
@@ -2952,7 +2978,10 @@ herr_t _readH5dataInfo(hid_t dset, char *name, NclFileVarNode *node)
             mname = H5Tget_member_name(type, i);
             compnode->name = NrmStringToQuark(mname);
             compnode->offset = (unsigned long) H5Tget_member_offset(type, i);
-            free(mname);
+	    if (HAS_H5_FREE_MEM)
+		    H5free_memory(mname);
+	    else
+		    free(mname);
 
             componentnames[i] = compnode->name;
 
@@ -2967,8 +2996,13 @@ herr_t _readH5dataInfo(hid_t dset, char *name, NclFileVarNode *node)
 		    break;
 	    case H5T_ARRAY:
 		    ndims = H5Tget_array_ndims(subtype);
-		    compnode->dimsizes = NclCalloc(ndims, sizeof(int));
-		    ndims = H5Tget_array_dims2(subtype,compnode->dimsizes);
+		    compnode->dimsizes = NclCalloc(ndims, sizeof(ng_size_t));
+		    dimsizes = NclCalloc(ndims, sizeof(hsize_t));
+		    ndims = H5Tget_array_dims2(subtype,dimsizes);
+		    for (j = 0; j < ndims; j++) {
+			    compnode->dimsizes[j] = (ng_size_t) dimsizes[j];
+		    }
+		    NclFree(dimsizes);
 		    compnode->rank = ndims;
 		    break;
 	    }		    
@@ -3168,19 +3202,15 @@ herr_t _readH5dataInfo(hid_t dset, char *name, NclFileVarNode *node)
 	    {
 		    ng_size_t size;
 		    char buf[1024];
-		    hid_t deref_id, type_id;
+		    hid_t deref_id;
 		    herr_t status;
-		    hsize_t dims[20], max_dims[20];
-		    int ndims;
 		    void *loc = (void *) ((char*)rbuf) + tsize * i;
 		    H5S_sel_type region_type;
 		    hssize_t   nblocks;
-		    H5I_type_t t;
 		    int valid;
 
 		    if (ref_type == H5R_DATASET_REGION) {
 			    space_id = H5Rget_region(dset, ref_type,loc);
-			    ndims = H5Sget_simple_extent_dims(space_id,dims,max_dims);
 			    region_type = H5Sget_select_type(space_id);
 			    if (region_type == H5S_SEL_POINTS) {
 				    ;
@@ -3218,7 +3248,6 @@ herr_t _readH5dataInfo(hid_t dset, char *name, NclFileVarNode *node)
 				    H5Tclose(deref_id);
 				    break;
 			    case H5O_TYPE_DATASET:
-				    type_id = H5Dget_type(deref_id);
 				    H5Dclose(deref_id);
 				    break;
 			    case H5O_TYPE_GROUP:
@@ -3253,9 +3282,9 @@ static herr_t _get_status(hid_t id, hid_t obj_id, H5O_type_t obj_type, const cha
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "FAILED in file: %s, line: %d\n", flnm, ln);
         fprintf(stderr, "\tname: <%s>\n", name);
-        fprintf(stderr, "\tid: %d\n", id);
+        fprintf(stderr, "\tid: "HID_FORMAT"\n", id);
         fprintf(stderr, "\tobj_type: %d\n", obj_type);
-        fprintf(stderr, "\tobj_id: %d\n", obj_id);
+        fprintf(stderr, "\tobj_id: "HID_FORMAT"\n", obj_id);
         fprintf(stderr, "FAILED in file: %s, line: %d\n", flnm, ln);
         fprintf(stderr, "**************************************************************\n");
         fprintf(stderr, "\n\n\n");
@@ -3343,7 +3372,6 @@ herr_t _searchH5obj(char *name, const H5O_info_t *oinfo,
     switch (obj_type)
     {
 	char buf[200];
-	H5I_type_t itype;
         case H5O_TYPE_GROUP:
           /*
            *Open the object.
@@ -3351,7 +3379,6 @@ herr_t _searchH5obj(char *name, const H5O_info_t *oinfo,
            *If this is the case then return right away.
            */
             obj_id = H5Oopen(id, name, H5P_DEFAULT);
-	    itype = H5Iget_type(obj_id);
             H5Iget_name(obj_id,buf,64);
             status = _get_status(id, obj_id, obj_type, name, __FILE__, __LINE__);
             if(FAILED == status)
@@ -3488,7 +3515,7 @@ herr_t _searchH5obj(char *name, const H5O_info_t *oinfo,
             break;
         case H5O_TYPE_NAMED_DATATYPE:
 	{
-	    NclQuark qdn, qpn;
+	    NclQuark qpn;
 	    int nudt = 0;
 	    h5_group_name_struct_t h5grplvl;
 	    NclFileUDTNode *curudtnode = NULL;
@@ -3498,7 +3525,6 @@ herr_t _searchH5obj(char *name, const H5O_info_t *oinfo,
 	    char *cp;
 
 	    h5grplvl = _get_parent_group_name(name);
-	    qdn = NrmStringToQuark(h5grplvl.short_name[0]);
 	    qpn = NrmStringToQuark(h5grplvl.parent_name[0]);
 	    if(h5grplvl.size)
 		    curgrpnode = _getGrpNodeByName(grpnode, qpn);
@@ -4236,12 +4262,10 @@ static void _updateUDTinfo(NclFileGrpNode **rootgrp, NclFileUDTRecord *udt_rec)
     NclFileVarNode   *varnode = NULL;
     NclFileVarRecord *varrec = NULL;
 
-    int i, j, n;
+    int i, n;
     hid_t       did;
     hid_t       u_type;
-    hid_t       u_tid;
     hid_t       d_type;
-    hid_t       d_tid;
 
     if (! udt_rec) {
 	    return;
@@ -4676,18 +4700,10 @@ void *_getH5compoundAsList(hid_t fid, NclFileVarNode *varnode)
     hsize_t     ndims = 0;
 
     char *component_name;
-
-    NclList complist;
-
-    NclVar compvar;
-
-    ng_size_t complength = 1;
-
     ng_size_t dimsizes[H5S_MAX_RANK];
     NrmQuark dimnames[H5S_MAX_RANK];
 
     NclMultiDValData comp_md = NULL;
-    obj *listids = NULL;
 
     NclFileCompoundNode *compnode = NULL;
 
@@ -4701,16 +4717,12 @@ void *_getH5compoundAsList(hid_t fid, NclFileVarNode *varnode)
 
     void *values = NULL;
     void *compvalues = NULL;
-    char buffer[MAX_NCL_NAME_LENGTH];
 
-  /*hid_t  dataspace;*/
     hid_t  datatype;
-    size_t datasize;
 
     obj *id;
     NclList tmp_list;
     ng_size_t one = 1;
-    NclMultiDValData list_obj;
     NclDimRec *dim_rec;
     NclVar tmp_var;
     NclMultiDValData tmp_md;
@@ -4744,7 +4756,6 @@ void *_getH5compoundAsList(hid_t fid, NclFileVarNode *varnode)
     did = H5Dopen(fid, NrmQuarkToString(varnode->real_name), H5P_DEFAULT);
 
     datatype  = H5Dget_type(did); 
-    datasize  = H5Tget_size(datatype);
 
     ndims = 0;
     size = 1;
@@ -5437,13 +5448,8 @@ void _getH5reference(hid_t fid, NclFileVarNode *varnode,
                   ng_size_t *stride, ng_size_t *count,
                   void *storage)
 {
-    hid_t       did;
-    H5S_class_t space_type;
-    hid_t       d_space;
-    hid_t       d_type;
     ng_size_t dimsize[H5S_MAX_RANK];
     ng_size_t i, n, position, start_position, totalsize;
-    int       nref = 0;
     NrmQuark* quarkptr = (NrmQuark*) storage;
     NclFileReferenceNode *refnode = (NclFileReferenceNode *) varnode->type_specific_rec;
 
@@ -6009,7 +6015,7 @@ static void *H5ReadVar(void *therec, NclQuark thevar,
     NclFileGrpNode *grpnode = (NclFileGrpNode *) therec;
     NclFileVarNode *varnode;
     ng_size_t n_elem = 1;
-    int fid = -1;
+    hid_t fid = -1;
     int i;
     ng_size_t count[MAX_NC_DIMS];
 
@@ -6271,7 +6277,7 @@ static void H5FreeFileRec(void* therec)
 static void *H5CreateFile(void *rec, NclQuark path)
 {
     NclFileGrpNode *grpnode = (NclFileGrpNode *) rec;
-    int fid = -1;
+    hid_t fid = -1;
     int mode = H5P_DEFAULT;
     /* flags could be H5F_ACC_TRUNC if we make an option for over-writing on create */
 
@@ -6480,7 +6486,8 @@ static NhlErrorTypes H5AddVar(void* therec, NclQuark thevar,
 {
     NclFileGrpNode *grpnode = (NclFileGrpNode *)therec;
     NclFileVarNode *varnode = NULL;
-    int fid,i,j;
+    hid_t fid;
+    int i,j;
     int dim_ids[MAX_VAR_DIMS];
     int add_scalar_dim = 0;
 
@@ -8019,7 +8026,7 @@ NhlErrorTypes H5WriteCompound(void *rec, NclQuark compound_name, NclQuark var_na
 }
 
 void _H5_add_udt(NclFileUDTRecord **rootudtrec,
-                 int gid, int uid, NclQuark name,
+                 hid_t gid, hid_t uid, NclQuark name,
                  int ncl_class, size_t base_type,
                  size_t size, size_t nfields,
                  NclQuark *mem_name, NclBasicDataTypes *mem_type)
